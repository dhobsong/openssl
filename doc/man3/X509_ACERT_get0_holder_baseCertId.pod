=pod

=head1 NAME

X509_ACERT_get0_holder_baseCertId,
X509_ACERT_get0_holder_digest,
X509_ACERT_get0_holder_entityName,
X509_ACERT_set0_holder_baseCertId,
X509_ACERT_set0_holder_digest,
X509_ACERT_set0_holder_entityName,
ISSUER_SERIAL_get0_issuer,
ISSUER_SERIAL_get0_issuerUID,
ISSUER_SERIAL_get0_serial,
ISSUER_SERIAL_set1_issuer,
ISSUER_SERIAL_set1_issuerUID,
ISSUER_SERIAL_set1_serial,
OBJECT_DIGEST_INFO_get0_digest,
OBJECT_DIGEST_INFO_set0_digest - get and set Attribute Certificate holder fields

=head1 SYNOPSIS

 #include <openssl/x509v3.h>

 const GENERAL_NAMES *X509_ACERT_get0_holder_entityName(const X509_ACERT *x);
 ISSUER_SERIAL *X509_ACERT_get0_holder_baseCertId(const X509_ACERT *x);
 OBJECT_DIGEST_INFO * X509_ACERT_get0_holder_digest(const X509_ACERT *x);
 void X509_ACERT_set0_holder_entityName(X509_ACERT *x, GENERAL_NAMES *name);
 void X509_ACERT_set0_holder_baseCertId(X509_ACERT *x, ISSUER_SERIAL *isss);
 void X509_ACERT_set0_holder_digest(X509_ACERT *x,
                                     OBJECT_DIGEST_INFO *dinfo);

 X509_NAME *ISSUER_SERIAL_get0_issuer(ISSUER_SERIAL *isss);
 ASN1_INTEGER *ISSUER_SERIAL_get0_serial(ISSUER_SERIAL *isss);
 ASN1_BIT_STRING *ISSUER_SERIAL_get0_issuerUID(ISSUER_SERIAL *isss);
 int ISSUER_SERIAL_set1_issuer(ISSUER_SERIAL *isss, X509_NAME *issuer);
 int ISSUER_SERIAL_set1_serial(ISSUER_SERIAL *isss, ASN1_INTEGER *serial);
 int ISSUER_SERIAL_set1_issuerUID(ISSUER_SERIAL *isss, ASN1_BIT_STRING *uid);

 void OBJECT_DIGEST_INFO_get0_digest(OBJECT_DIGEST_INFO *o,
                                      ASN1_ENUMERATED **digestedObjectType,
                                      X509_ALGOR **digestAlgorithm,
                                      ASN1_BIT_STRING **digest);
 void OBJECT_DIGEST_INFO_set0_digest(OBJECT_DIGEST_INFO *o,
                                      ASN1_ENUMERATED *digestedObjectType,
                                      X509_ALGOR *digestAlgorithm,
                                      ASN1_BIT_STRING *digest);


=head1 DESCRIPTION

These routines set and get the holder identity of an X509 attribute certificate.

X509_ACERT_set0_holder_entityName() sets the identity as a B<GENERAL_NAME>
I<name>, X509_ACERT_set0_holder_baseCertId() sets the identity based on the
issuer and serial number of a certificate detailed in I<isss> and
X509_ACERT_set0_holder_digest() sets the holder entity based on digest
information I<dinfo>. Although RFC 5755 section 4.2.2 recommends that only
one of the above methods be used to set the holder identity for a given
attribute certificate I<x>, setting multiple methods at the same time is
possible.  It is up to the application to handle cases when conflicting
identity information is specified using different methods.

Pointers to the internal structures describing the holder identity of
attribute certificate I<x> can be retrieved with
X509_ACERT_get0_holder_entityName(), X509_ACERT_get0_holder_baseCertId(), and
X509_ACERT_get0_holder_digest().

A B<ISSUER_SERIAL> object holds the subject name and UID of a certificate
issuer and a certificate's serial number.  ISSUER_SERIAL_set1_issuer(),
ISSUER_SERIAL_set1_issuerUID(), and ISSUER_SERIAL_set1_serial()
respectively copy these values into the B<ISSUER_SERIAL> structure.
The application is responsible for freeing its own copy of these values after
use.  ISSUER_SERIAL_get0_issuer(), ISSUER_SERIAL_get0_issuerUID(),
and ISSUER_SERIAL_get0_serial() return pointers to these values in the object.

An B<OBJECT_DIGEST_INFO> object holds a digest of data to identify the
attribute certificate holder.  OBJECT_DIGEST_INFO_set0_digest() sets the
digest information of the object, freeing any previously set digest.
The type of I<digest> information is given by I<digestedObjectType> and
can be one of:

=over 4

=item OBJECT_DIGEST_INFO_PUBLIC_KEY

Hash of a public key

=item OBJECT_DIGEST_INFO_PUBLIC_KEY_CERT

Hash of a public key certificate

=item OBJECT_DIGEST_INFO_OTHER

Hash of another object. See NOTES below.

=back

I<digestAlgorithm> indicates the algorithm used to compute I<digest>.

=head1 RETURN VALUES

All I<set0>/I<set1> routines return 1 for success and 0 for failure.
All I<get0> functions return a pointer to the objects inner structure. These
pointers must not be freed after use.

=head1 NOTES

Although the value of B<OBJECT_DIGEST_INFO_OTHER> is defined in RFC 5755, its
used is prohibited for conformant attribute certificates.

=head1 COPYRIGHT

Copyright 2021 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
